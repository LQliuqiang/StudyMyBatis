<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.lq.day4.UserInfoMapper">

    <!--
    整体内容：
    • if:判断
    • choose (when, otherwise):分支选择；就是相当于Java代码中带了break的swtich-case语句
        如果带了id就用id查，如果带了lastName就用lastName查;只会进入其中一个
    • trim 字符串截取(where(封装查询条件), set(封装修改条件))
    • foreach 遍历集合
         -->
    <!--
     • if:判断
    test：判断表达式（OGNL）
		 	OGNL参照PPT或者官方文档。
		 	  	 c:if  test
		 	从参数中取值进行判断
		 	遇见特殊符号应该去写转义字符：
		 	&&：
		 	-->

    <!--1.where标签测试-->
    <!--mybatis使用where标签来将所有的查询条件包括在内。mybatis就会将where标签中拼装的sql，多出来的and或者or去掉-->
    <!--where只会去掉第一个多出来的and或者or。-->
    <select id="getUserInfoConditionWhere" resultType="com.lq.day4.UserInfo">
        select * from user_info
        <where>
            <!--id不为空的判断-->
            <if test="id!=null">
                id=#{id}
            </if>
            <!--username不为空且不是空字符串 就执行username的模糊查询-->
            <if test="userName!=null and userName!=''">
                and username like #{userName}
            </if>
            <if test="password!=null">
                and password=#{password}
            </if>
        </where>
    </select>


    <!--2.trim标签测试-->
    <!-- 后面多出的and或者or where标签不能解决
	 	prefix="":前缀：trim标签体中是整个字符串拼串 后的结果。
	 			prefix给拼串后的整个字符串加一个前缀
	 	prefixOverrides="":
	 			前缀覆盖： 去掉整个字符串前面多余的字符
	 	suffix="":后缀
	 			suffix给拼串后的整个字符串加一个后缀
	 	suffixOverrides=""
	 			后缀覆盖：去掉整个字符串后面多余的字符

	 	-->
    <select id="getUserInfoConditionTrim" resultType="com.lq.day4.UserInfo">
        select * from user_info
        <trim prefix="where" suffixOverrides="and">
            <!--id不为空的判断-->
            <if test="id!=null">
                id=#{id} and
            </if>
            <!--username不为空且不是空字符串 就执行username的模糊查询-->
            <if test="userName!=null and userName!=''">
                username like #{userName} and
            </if>
            <if test="password!=null">
                password=#{password}
            </if>
        </trim>
    </select>

    <!--3.choose标签测试-->
    <select id="getUserInfoConditionChoose" resultType="com.lq.day4.UserInfo">
        select * from user_info
        <where>
            <!-- 如果带了id就用id查，如果带了lastName就用lastName查;只会进入其中一个 -->
            <choose>
                <when test="id!=null">
                    id=#{id}
                </when>
                <when test="userName!=null and userName!=''">
                    username like #{userName} and
                </when>
                <when test="password!=null">
                    password=#{password}
                </when>
                <otherwise>
                    id=#{id}
                </otherwise>
            </choose>
        </where>
    </select>

    <!--4.set标签测试-->
    <update id="updateUserInfoConditionSet">
        update user_info
        <set>
            <!-- 如果username不为空 就更新username 否则不更新username-->
            <if test="userName!=null">
                username=#{userName},
            </if>
            <!-- 如果password不为空 就更新password -->
            <if test="password!=null">
                password=#{password},
            </if>
            <!-- 如果password不为空 就更新password -->
            <if test="info!=null">
                info=#{info}
            </if>
        </set>
        where id=#{id}
    </update>


    <!--4.foreach标签测试:通常用于批量保存-->
    <select id="getUserInfoConditionForeach" resultType="com.lq.day4.UserInfo">
        <!--select * from user_Info where id in(2,3,4)-->
        select * from user_Info where id in
        <!--
            collection：指定要遍历的集合：
                list类型的参数会特殊处理封装在map中，map的key就叫list
            item：将当前遍历出的元素赋值给指定的变量
            separator:每个元素之间的分隔符
            open：遍历出所有结果拼接一个开始的字符
            close:遍历出所有结果拼接一个结束的字符
            index:索引。遍历list的时候是index就是索引，item就是当前值
                          遍历map的时候index表示的就是map的key，item就是map的值

            #{变量名}就能取出变量的值也就是当前遍历出的元素
          -->
        <foreach collection="ids" item="item_id" separator="," open="(" close=")">
            #{item_id}
        </foreach>
    </select>

    <!--
   5.foreach标签测试: 批量插入多条数据
    insert into user_info(username,password,id,info) values("liuqiang",123456,7,"sddd"),("xiao",46545,8,"aa")
    -->

    <insert id="saveUserInfoConditionForeach">
        <!--insert into user_info(username,password,id,info) values-->
        <!--include标签是引用外部定义的sql标签中定义的username,password,id,info字段-->
        insert into user_info(<include refid="userInfoColumn"/>) values
        <foreach collection="userInfos" item="userInfo" separator=",">
            (#{userInfo.userName},#{userInfo.password},#{userInfo.info})
        </foreach>
    </insert>


    <!--6. 两个内置参数：
        不只是方法传递过来的参数可以被用来判断，取值。。。
        mybatis默认还有两个内置参数：
        _parameter:代表整个参数
            单个参数：_parameter就是这个参数
            多个参数：参数会被封装为一个map；_parameter就是代表这个map

        _databaseId:如果配置了databaseIdProvider标签。
            _databaseId就是代表当前数据库的别名oracle
     -->
    <select id="getUserInfoTestInnerParameter" resultType="com.lq.day4.UserInfo">
        <!-- bind：可以将OGNL表达式的值绑定到一个变量中，方便后来引用这个变量的值 -->
        <!--<bind name="_userName" value="'%'+userName+'%'"/>-->
        select * from user_info
        <!--如果有参数，就条件查询，没有的话，就不条件查询-->
        <if test="_parameter!=null">
            where username like #{userName}
        </if>
    </select>


    <!--
    7.sql标签与include标签测试
       抽取可重用的sql片段。方便后面引用
	  	1、sql抽取：经常将要查询的列名，或者插入用的列名抽取出来方便引用
	  	2、include来引用已经抽取的sql：
	  	3、include还可以自定义一些property，sql标签内部就能使用自定义的属性
	  			include-property：取值的正确方式${prop},
	  			#{不能使用这种方式}
    -->
    <sql id="userInfoColumn">
        username,password,id,info
    </sql>
</mapper>